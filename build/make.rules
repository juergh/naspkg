# -*- Makefile -*-

# Parse the info file. The 3rd line is the one and only we care about!
NAME    := $(shell awk 'NR == 3 { print $$1 }' naspkg/info)
VERSION := $(shell awk 'NR == 3 { print $$3 }' naspkg/info)
DATE    := $(shell awk 'NR == 3 { print $$5 }' naspkg/info | tr -d '/')

# Check if we're building a shared package
ifeq ($(NAME), shared)
  SHARED :=
else
  SHARED := $(shell test -e naspkg/imodule.xml && echo || echo shared)
endif

# Find the root of the tree
ROOT := $(shell \
	d=$$(readlink -e .) ; \
	while [ ! -d $$d/packages ] ; do \
		d=$$(readlink -e $$d/../) ; \
	done ; \
	echo $$d)

# Temporary install and build directories
INSTALL := .install/$(SHARED)/$(NAME)
BUILD := .build

# Staging directory
STAGING := $(ROOT)/staging

# Local installation directory (for testing purposes)
DESTDIR := $(ROOT)/Nas_Pkg

# Package and info file names
NASPKG := $(NAME)-$(VERSION).tgz
INFO   := $(NAME)-$(VERSION).info

# Compiler and linker flags
CPPFLAGS += -I$(STAGING)/usr/include
LDFLAGS += -L$(STAGING)/usr/lib
PKG_CONFIG_PATH := $(STAGING)/usr/lib/pkgconfig

# Build targets
TARGETS := $(foreach s, $(SRC), $(BUILD)/$(s) $(s)-build $(s)-install) \
	$(INSTALL)/info \
	$(NASPKG) \
	$(INFO)

# Build all
all: $(TARGETS)

# Create the info file
$(INFO):
	cp naspkg/info $(INFO)

# Create the package tarball
$(NASPKG):
	tar -czvf $(NASPKG) -C .install .

# Create the build directory and copy the source
$(BUILD)/%:
	mkdir -p $@
	cp -aR $*/* $@

# Create the build directory and copy the source
#$(BUILD):
#ifneq ($(SRC), )
#	echo $(SRC)
#	mkdir -p $(BUILD)
#	for dir in $(SRC) ; do echo $$dir done
#	cp -aR $(SRC)/* $(BUILD)
#endif

# Create the install directory and copy the naspkg template
$(INSTALL)/info:
	mkdir -p $(INSTALL) || true
	cp -aR naspkg/* $(INSTALL)
	test -e $(INSTALL)/imodule.xml && \
		sed -i -e 's/VERSION/$(VERSION)/' -e 's/DATE/$(DATE)/' \
			$(INSTALL)/imodule.xml || true

# Install the package
install:
	test -d $(DESTDIR) || mkdir -p $(DESTDIR)
	@echo "Installing $(NASPKG) ..."
	tar -xzvf $(NASPKG) -C $(DESTDIR)

# Cleaning rules
#clean:	$(NAME)-clean
clean:
	@test -d .install && rm -rf .install || true
	@test -d .build && rm -rf .build || true
	@test -f $(NASPKG) && rm $(NASPKG) || true
	@test -f $(INFO) && rm $(INFO) || true

deepclean: clean
	@test -d $(DESTDIR) && rm -rf $(DESTDIR) || true
	@test -d $(STAGING) && rm -rf $(STAGING) || true
